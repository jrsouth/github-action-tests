name: Build and push containers to GAR
run-name: Build and push container images for branch ${{ github.ref_name }} (by @${{ github.actor }})

on:
  push:
    branches:
      - main
  # pull_request:
  #   types:
  #     - closed
  #   branches:
  #     - 'main'

env:
  GH_TOKEN: ${{ github.token }}
  COMPOSE_PROJECT_NAME: ${{ vars.PROJECT_NAME || 'artifact-registry-test' }}

  GOOGLE_DOCKER_REGISTRY: ${{ vars.GOOGLE_LOCATION }}-docker.pkg.dev
  GOOGLE_DOCKER_REPOSITORY: ${{ vars.GOOGLE_LOCATION }}-docker.pkg.dev/${{ vars.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_ARTIFACT_REPOSITORY }}


jobs:

  create-release:
    runs-on: ubuntu-24.04
    permissions:
      actions: write
      contents: write
      id-token: write

    steps:


      # Chapter One: Get the code

      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Quick temp env check
        run: env


      # Configure and test our Google credentials
      # See: [@todo: dig out the links]

      - name: Configure Google authentication
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GOOGLE_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Test gcloud auth connection
        run: gcloud info

      - name: Configure Docker authentication for the Google Artifact Registry
        run: gcloud auth configure-docker $GOOGLE_DOCKER_REGISTRY --quiet
        # run: |
        #   gcloud auth configure-docker --quiet
        #   gcloud auth configure-docker $GOOGLE_DOCKER_REGISTRY --quiet


      # Fast fail to save testing time
      # - name: Fast error
      #   run: exit 1





      # Now the work begins

      - name: Create the new release's version number
        id: create-release-tag
        run: |
          CURRENT_RELEASE_VERSION=$(gh release list --json tagName --jq '.[].tagName' \
            | sed -e 's/^v//' | sort -hrt '.' -k 1,1 -k 2,2 -k 3,3 | head -n 1)
          echo "Current release: " $CURRENT_RELEASE_VERSION
          NEW_RELEASE_VERSION=$(awk -F '.' '{print $1 "." $2 "." $3 + 1}' <<< $CURRENT_RELEASE_VERSION)
          echo "New release: " $NEW_RELEASE_VERSION
          echo "NEW_RELEASE_VERSION=$NEW_RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "Prepared new release $NEW_RELEASE_VERSION" >> "$GITHUB_STEP_SUMMARY"

      - name: Build the docker images
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: docker compose -f docker/docker-compose.yml build

      # Re-tag as :latest if we're on the main branch
      # ...Can we do this in gcloud, unclear if we're pushing the image again or just the tags

      - name: Re-tag and as :latest for the main branch # TODO: use a variable for the branch name?
        if: github.ref_name == 'main'
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: |
          docker image list
          docker image list --filter=reference=${GOOGLE_DOCKER_REPOSITORY}/*:${NEW_RELEASE_VERSION} --format='{{.Repository}}'
          docker image list --filter=reference=${GOOGLE_DOCKER_REPOSITORY}/*:${NEW_RELEASE_VERSION} --format='{{.Repository}}' | xargs -I '@' -n 1 docker tag @:${NEW_RELEASE_VERSION} @:latest
          docker image list
          echo Done?

      - name: Push the specific-version-tagged docker images
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: docker image push --filter=reference=${GOOGLE_DOCKER_REPOSITORY}/*


      # We do the GitHub release only after a successful build/push, otherwise
      # we'll have a GitHub release without any corresponding Google Artifact
      # Repository images - which in a very practical way isn't a real release.
      - name: Create a GitHub release
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: |
          RELEASE_BRANCH=$(git branch --show-current)
          [[ "$RELEASE_BRANCH" = "main" ]] && RELEASE_TYPE_FLAG="--latest" || RELEASE_TYPE_FLAG="--prerelease"
          [[ "$RELEASE_BRANCH" = "main" ]] || RELEASE_TITLE_SUFFIX="on $RELEASE_BRANCH"
          gh release create "v$NEW_RELEASE_VERSION" \
            --generate-notes \
            --target $RELEASE_BRANCH \
            --title "Release v$NEW_RELEASE_VERSION$RELEASE_TITLE_SUFFIX" \
            $RELEASE_TYPE_FLAG

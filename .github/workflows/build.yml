name: Build and push container images to a Google Artifact Repository
run-name: Push images for '${{ github.ref_name }}' (by @${{ github.actor }})

on:
  push:
    branches:
      # Is there a way to access ${vars.XXX} here rather than hard-coding `main`? e.g., `${{ vars.RELEASE_BRANCH | 'main' }}`
      - main
      - feature/*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # If we can ever reference vars within the `on:` section, this could collect a shared value instead of hard-coding
  RELEASE_BRANCH: 'main'

  CURRENT_BRANCH: ${{ github.ref_name }}

  COMPOSE_PROJECT_NAME: ${{ vars.COMPOSE_PROJECT_NAME }}
  COMPOSE_FILE: ${{ vars.COMPOSE_FILE || './docker-compose.yml' }}

  GOOGLE_DOCKER_REGISTRY: ${{ vars.GOOGLE_LOCATION }}-docker.pkg.dev
  GOOGLE_DOCKER_REPOSITORY: ${{ vars.GOOGLE_LOCATION }}-docker.pkg.dev/${{ vars.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_ARTIFACT_REPOSITORY }}

  GH_TOKEN: ${{ github.token }}


jobs:

  create-release:
    name: Create container images and push them to Google
    runs-on: ubuntu-24.04
    permissions:
      actions: write
      contents: write
      id-token: write

    steps:

      # ===================================================================
      # ===  Chapter One: Check our GitHub variables, and get the code  ===
      # ===================================================================

      - name: Make sure we have the expected variables
        run: |
          [ -n "${{ vars.COMPOSE_PROJECT_NAME }}" ] \
            && [ -n "${{ vars.GOOGLE_PROJECT_ID }}" ] \
            && [ -n "${{ vars.GOOGLE_LOCATION }}" ] \
            && [ -n "${{ vars.GOOGLE_ARTIFACT_REPOSITORY }}" ] \
            && [ -n "${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}" ] \

      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Check the docker-compose file exits
        run: '[ -f "$COMPOSE_FILE" ]'



      # ===================================================
      # ===  Configure and test our Google credentials  ===
      # ===================================================

      # See: https://github.com/google-github-actions/auth/tree/v2/?tab=readme-ov-file#direct-wif
      # See: https://cloud.google.com/sdk/gcloud/reference/projects/add-iam-policy-binding
      #      [@todo: dig out other helpful links]
      #
      # We'll need the permission `artifactregistry.repositories.uploadArtifacts` which can
      # be granted via the role `roles/artifactregistry.writer`:
      #
      #   gcloud projects add-iam-policy-binding <PROJECT-ID> \
      #     --role=roles/artifactregistry.writer \
      #     --member="principalSet://iam.googleapis.com/projects/<PROJECT-ID>/locations/global/workloadIdentityPools/<POOL-ID>/attribute.repository/<GITHUB-OWNER>/<REPO-NAME>"

      - name: Configure Google authentication
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GOOGLE_PROJECT_ID }}
          # Format: projects/<PROJECT-ID>/locations/global/workloadIdentityPools/<POOL-ID>/providers/<PROVIDER-ID>
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Test gcloud auth connection
        run: |
          gcloud info
          echo "-------------------------------------------------"
          echo ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }} | sed 's/./& /g'
          echo "-------------------------------------------------"
          gcloud container images list --repository=$GOOGLE_DOCKER_REPOSITORY

      - name: Configure Docker authentication for the Google Artifact Registry
        run: gcloud auth configure-docker $GOOGLE_DOCKER_REGISTRY --quiet



      # ==============================================================
      # ===  Create the next release's semantic versioning string  ===
      # ==============================================================

      # This just increments the patch version of the previous GitHub release, nothing fancy.
      # Requires a manual release to bump the major or minor versions. Does NOT handle pre-release
      # version information (e.g., `-beta.3`) or build metadata (e.g., `+20240625154722.28c8c440bdc0`)

      - name: Create the new release's version number
        id: create-release-tag
        run: |
          CURRENT_RELEASE_VERSION=$(gh release list --json tagName --jq '.[].tagName' \
            | sed -e 's/^v//' | sort -hrt '.' -k 1,1 -k 2,2 -k 3,3 | head -n 1)
          echo "Current release: " $CURRENT_RELEASE_VERSION
          NEW_RELEASE_VERSION=$(awk -F '.' '{print $1 "." $2 "." $3 + 1}' <<< $CURRENT_RELEASE_VERSION)
          echo "New release: " $NEW_RELEASE_VERSION
          echo "NEW_RELEASE_VERSION=$NEW_RELEASE_VERSION" >> "$GITHUB_OUTPUT"



      # ===========================================================
      # ===  Set up caching and create a suitable compose file  ===
      # ===========================================================

      # We're using GitHub caches directly ― using the `gha` cache backend did not work for building
      # multiple images from a compose file, due to clobbering of the index.json file.
      #
      # Since GitHub caches are write-once, this leaves a trail of previous cache versions, which it
      # might be nice to clean up as we go via explicit cache-restore and cache-save actions, along
      # with deletion of the previous cache (AFTER saving the current one).
      #
      # @see "force-deletion" in https://github.com/actions/cache/blob/main/tips-and-workarounds.md

      - name: Restore docker layer cache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/docker-cache
          key: docker-cache/${{ github.run_id }}/v${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
          restore-keys: docker-cache/

      # To use the `local` cache backend we need to use the docker-container driver (via buildx)
      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      # This giant `jq` filter creates a new file which injects *unique* `cache_from` and `cache_to`
      # values into each service definition with a `build` step, allowing the GitHub cache to play
      # nicely with parallel builds.
      #
      # This does lead to redundancy if a base image is reused, since it's stored separately in each
      # service's cache, but using a single/shared cache location results in cache misses, as only
      # the chronologically-final index.json is stored ― which excludes any references to the other
      # images' unique layers. (This is also why the docker `gha` backend fails to work correctly.)
      - name: Create local cache-config file
        run: |
          docker compose config --format json \
            | jq '{"services":.services|map_values(select(.build!=null))|with_entries({key:(.key),value:{"build":{"cache_from":[("type=local,src=${{ runner.temp }}/docker-cache/"+.key)],"cache_to":[("type=local,dest=${{ runner.temp }}/docker-cache/"+.key+",mode=max")]}}})}' \
            > ${{ runner.temp }}/docker-compose.cache.json

      # `docker buildx bake` has issues with relative working directory contexts, so we pass the
      # combined files through `docker compose config` to generate a version with absolute paths.
      - name: 'Create a compose file for use by buildx'
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: |
          docker compose -f $COMPOSE_FILE -f ${{ runner.temp }}/docker-compose.cache.json config \
            > ${{ runner.temp }}/docker-compose.buildx.yml



      # ==================================================
      # ===  Build, tag, and push the required images  ===
      # ==================================================

      # Builds all images defined in our docker-compose.yml file, assuming that anything built will
      # be part of the Artifact Repository. (If we have any dev-only containers it could be wasted
      # effort to build them here, although they won't get pushed anywhere since we filter based on
      # the output image's `reference`, and that will only be set for "real" containers.)
      #
      # We add the `:latest` tag if this workflow is running on the defined release branch.
      #
      # And we push them to the defined Google Artifact Repository

      # The actual build step is now very simple
      - name: Build the docker images
        run: docker buildx bake -f ${{ runner.temp }}/docker-compose.buildx.yml --load

      - name: Re-tag as `:latest` for the release branch
        if: github.ref_name == ${{ env.RELEASE_BRANCH }}
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: |
          docker image list --filter=reference=${GOOGLE_DOCKER_REPOSITORY}/*:${NEW_RELEASE_VERSION} --format='{{.Repository}}' \
            | xargs -I '@' -n 1 docker tag @:${NEW_RELEASE_VERSION} @:latest

      - name: Push the container images
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: |
          docker image list --filter=reference=${GOOGLE_DOCKER_REPOSITORY}/*:${NEW_RELEASE_VERSION} --format='{{.Repository}}' \
            | xargs -n 1 docker image push --all-tags



      # =================================================
      # ===  Create a GitHub release (or prerelease)  ===
      # =================================================

      # We do the release only after a successful build and push, otherwise
      # we'd have a GitHub release without any corresponding Google Artifact
      # Repository images ― which in a very practical way isn't a real release.

      - name: Create a GitHub release
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: |
          [[ "$CURRENT_BRANCH" = "$RELEASE_BRANCH" ]] && RELEASE_TYPE_FLAG="--latest" || RELEASE_TYPE_FLAG="--prerelease"
          [[ "$CURRENT_BRANCH" = "$RELEASE_BRANCH" ]] || RELEASE_TITLE_SUFFIX=" - $CURRENT_BRANCH"
          gh release create "v$NEW_RELEASE_VERSION" \
            --generate-notes \
            --target $CURRENT_BRANCH \
            --title "v$NEW_RELEASE_VERSION$RELEASE_TITLE_SUFFIX" \
            $RELEASE_TYPE_FLAG

      - name: Report
        env:
          NEW_RELEASE_VERSION: ${{ steps.create-release-tag.outputs.NEW_RELEASE_VERSION }}
        run: |
          echo "Prepared new release v${NEW_RELEASE_VERSION}" >> "$GITHUB_STEP_SUMMARY"
          echo >> "$GITHUB_STEP_SUMMARY"
          echo "### Release:" >> "$GITHUB_STEP_SUMMARY"
          echo "- https://github.com/${{ github.repository }}/releases/tag/v${NEW_RELEASE_VERSION}" >> "$GITHUB_STEP_SUMMARY"
          echo >> "$GITHUB_STEP_SUMMARY"
          echo "### Images:" >> "$GITHUB_STEP_SUMMARY"
          echo >> "$GITHUB_STEP_SUMMARY"
          docker image list --filter=reference=${GOOGLE_DOCKER_REPOSITORY}/*:${NEW_RELEASE_VERSION} --format='{{.Repository}}:{{.Tag}}' \
            | sed -e 's#^.*/\(.*\)#- [\1](https://\0)#' >> "$GITHUB_STEP_SUMMARY"
